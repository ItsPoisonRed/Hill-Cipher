import secrets


def generate_private_key(max_prime):
    random_number = secrets.randbits(1024)
    if random_number > max_prime:
        random_number = secrets.randbits(1024)
    return random_number


def generate_public_key(p, g, private_key):
    return g**private_key % p


def main_dh():
    p = 170908316669822587535047841786057676351616791206661286598865023882151328271533910524683595075201661229453765621665113297328725054110379290728308146164774307470633385641641109089327557799801493427766332877702501496586305479524114434807855879249154903131358472726788223242644333734402144634134288311525944401813
    g = 172118042889753012323329851955246094085518095123879155333182214981677513050642608145251712968693948484352087180816811478275233868088833608223474709639027190502962529464794449428798411303211571875261577096886548261048841936325709119009361275117885492069959953334029432805612218960382328710608588832320698839960
    private_key = generate_private_key(p)
    public_key = generate_public_key(p, g, private_key)
    print(f"p: {p}")
    print(f"g: {g}")
    print(f"public_key: {public_key}")
    return p, g, private_key, public_key
